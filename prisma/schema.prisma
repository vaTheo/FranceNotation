generator client {
  provider = "prisma-client-js" // Specifies the provider for the Prisma client, in this case, it's JavaScript.
}

// This section configures the datasource. Datasources in Prisma represent the database type and connection details.
datasource db {
  provider = "postgresql" // Specifies the type of database, here it is PostgreSQL.
  url      = env("DATABASE_URL") // The connection URL, taken from an environment variable for security and flexibility.
}

// Definition of the User model. This model represents a user in the system.
model User {
  // En vrai l√†, mets ton id en String uuid  id String @id @default(uuid())
  id            Int             @id @default(autoincrement()) // Unique identifier, auto-increments.
  uuid          String          @unique // A unique string identifier, often used for secure identification.
  // √ßa j'esp√®re que c'est hash√© ü´£ (pour pas stocker les passwords en clair)
  password      String?         // Optional field for the user's password.
  email         String?         @unique // Optional unique email address for the user.
  // Pour le role il vaut mieux mettre une enum
  role          String          @default("user") // Role of the user, defaults to 'user'.
  createdAt     DateTime        @default(now()) // Timestamp of when the user was created.
  username      String?         @unique // Optional unique username.
  DataSourceAddressID DataSourceAddressID[] // One-to-many relation to DataSourceAddressID.
}

// Definition of the DataSourceAddressID model. This model links users to addresses.
model DataSourceAddressID {
  id                  Int        @id @default(autoincrement())
  addressID           String     @unique
  street              String
  city                String
  postcode            String
  citycode            String
  userId              Int //Foreign key
  // Other database linked 
  AllRatings          AllRatings[]
  jsonDataGeorisque   jsonDataGeorisque[]
  jsonDataEau         jsonDataEau[]

  // AllRatings AllRatings @relation(fields: [addressID], references: [addressID])
  user       User       @relation(fields: [userId], references: [id])
}

model jsonDataEau {
  // En vrai mets des uuid partout, c'est plus simple et standard
  id              Int @id @default(autoincrement())
  addressID       Int @unique
  // Je suis pas sur que √ßa soit une bonne id√©e de stocker en json pck apr√®s tu peux pas query ta data facilement en SQL
  eauPotable      Json

  // Link to DataSourceAddressID
  DataSourcesID   Int
  dataSource      DataSourceAddressID?  @relation(fields: [DataSourcesID], references: [id])

}

model jsonDataGeorisque {
  id                        Int           @id @default(autoincrement())
  AZIData                   Json
  CatnatData                Json
  InstallationsClasseesData Json
  MVTData                   Json
  RadonData                 Json
  RisquesData               Json
  SISData                   Json
  TRIData                   Json
  ZonageSismiqueData        Json
  // Link to DataSourceAddressID
  DataSourcesID             Int           //Foreign key
  dataSource                DataSourceAddressID?  @relation(fields: [DataSourcesID], references: [id])
}


// Definition of the AllRatings model. This model stores various ratings for an address.
model AllRatings {
  id                        Int            @id @default(autoincrement()) // Unique identifier, auto-increments.
  addressID                 String         @unique // Unique string to identify the address.
  // Fields representing different types of data ratings:
  eauAnalysis               Int
  AZIData                   Int
  CatnatData                Int
  InstallationsClasseesData Int
  MVTData                   Int
  RadonData                 Int
  RisquesData               Int
  SISData                   Int
  TRIData                   Int
  ZonageSismiqueData        Int
  createdAt                 DateTime       @default(now()) // Timestamp of when the record was created.
  // Link to DataSourceAddressID
  DataSourcesID             Int?      //Foreign key
  dataSource                DataSourceAddressID?    @relation(fields: [DataSourcesID], references: [id])

}